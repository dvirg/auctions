###### RUNNING EXAMPLE FROM THE PAPER FOR TYPE (1,2)

#### Budget-Balanced Ascending Auction

Traders: [buyer: [17, 14, 13, 9, 6], seller: [-1, -2, -3, -4, -5, -7, -8, -10, -11]]
For comparison, the optimal trade has 3 deals: [(13, -5, -7), (14, -3, -4), (17, -1, -2)]

Procurement-set recipe: [1, 2]

## Phase 1: balancing the number of PS to 4
buyer: price increases to 6
buyer: 4 agents remain
buyer: price is now 6, 4 agents remain, 4 PS supported
seller: price is now -1000000, 9 agents remain, 4 PS supported

## Phase 2: balancing the price
buyer: 4 PS supported
seller: price increases to -11
seller: 8 agents remain
seller: 4 PS supported
buyer: price increases to 9
buyer: 3 agents remain
buyer: 3 PS supported
seller: price increases to -10
seller: 7 agents remain
seller: price increases to -8
seller: 6 agents remain
seller: 3 PS supported
buyer: price increases to 13
buyer: 2 agents remain
buyer: 2 PS supported
seller: price increases to -7
seller: 5 agents remain
seller: while increasing price towards -5, stopped at -6.5 where the price-sum crossed zero

Price crossed zero. Final price vector: [13, -6.5]
Traders: [buyer: [17, 14], seller: [-1, -2, -3, -4, -5]]
buyer: [17, 14]: all 2 agents trade and pay 13
seller: [-1, -2, -3, -4, -5]: random 4 out of 5 agents trade and pay -6.5


###### RUNNING EXAMPLE FROM THE PAPER, WITH DIFFERENT CATEGORY ORDER

#### Budget-Balanced Ascending Auction

Traders: [seller: [-1, -2, -3, -4, -5, -7, -8, -10, -11], buyer: [17, 14, 13, 9, 6]]
For comparison, the optimal trade has 3 deals: [(-5, -7, 13), (-3, -4, 14), (-1, -2, 17)]

Procurement-set recipe: [2, 1]

## Phase 1: balancing the number of PS to 4
seller: price is now -1000000, 9 agents remain, 4 PS supported
buyer: price increases to 6
buyer: 4 agents remain
buyer: price is now 6, 4 agents remain, 4 PS supported

## Phase 2: balancing the price
seller: price increases to -11
seller: 8 agents remain
seller: 4 PS supported
buyer: 4 PS supported
seller: price increases to -10
seller: 7 agents remain
seller: price increases to -8
seller: 6 agents remain
seller: 3 PS supported
buyer: price increases to 9
buyer: 3 agents remain
buyer: 3 PS supported
seller: price increases to -7
seller: 5 agents remain
seller: price increases to -5
seller: 4 agents remain
seller: 2 PS supported
buyer: while increasing price towards 13, stopped at 10.0 where the price-sum crossed zero

Price crossed zero. Final price vector: [-5, 10.0]
Traders: [seller: [-1, -2, -3, -4], buyer: [17, 14, 13]]
seller: [-1, -2, -3, -4]: all 4 agents trade and pay -5
buyer: [17, 14, 13]: random 2 out of 3 agents trade and pay 10.0
